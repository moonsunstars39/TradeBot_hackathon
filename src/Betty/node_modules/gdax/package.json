{
  "_args": [
    [
      "coinbase/gdax-node",
      "/home/analyzer/TradeBot_hackathon/src/Betty"
    ]
  ],
  "_from": "coinbase/gdax-node",
  "_id": "gdax@0.5.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/gdax",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/coinbase/gdax-node/master/package.json",
      "gitUrl": "git://github.com/coinbase/gdax-node.git",
      "httpsUrl": "git+https://github.com/coinbase/gdax-node.git",
      "shortcut": "github:coinbase/gdax-node",
      "ssh": "git@github.com:coinbase/gdax-node.git",
      "sshUrl": "git+ssh://git@github.com/coinbase/gdax-node.git",
      "type": "github"
    },
    "name": null,
    "raw": "coinbase/gdax-node",
    "rawSpec": "coinbase/gdax-node",
    "scope": null,
    "spec": "github:coinbase/gdax-node",
    "type": "hosted"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/coinbase/gdax-node.git#b708da1bd89eb22dcf229bdd5687032f9463de6e",
  "_shasum": "8b40f153fdb8baeb970349dc452c3c860b128cf1",
  "_shrinkwrap": null,
  "_spec": "coinbase/gdax-node",
  "_where": "/home/analyzer/TradeBot_hackathon/src/Betty",
  "author": {
    "name": "Coinbase"
  },
  "bugs": {
    "url": "https://github.com/coinbase/gdax-node/issues"
  },
  "contributors": [
    {
      "name": "Peter Downs",
      "email": "peterldowns@gmail.com",
      "url": "http://peterdowns.com"
    },
    {
      "name": "Maksim Stepanenko",
      "email": "maksimus16@gmail.com",
      "url": "http://maksim.ms"
    },
    {
      "name": "Miha Rebernik",
      "email": "miha@rebernik.info",
      "url": "http://miha.rebernik.info"
    }
  ],
  "dependencies": {
    "bintrees": "1.0.1",
    "num": "0.3.0",
    "request": "2.81.0",
    "ws": "3.0.0"
  },
  "description": "Client for the GDAX API",
  "devDependencies": {
    "eslint": "^4.0.0",
    "husky": "^0.13.4",
    "lint-staged": "^3.6.1",
    "mocha": "3.4.2",
    "nock": "9.0.13",
    "prettier": "^1.9.2"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "gitHead": "b708da1bd89eb22dcf229bdd5687032f9463de6e",
  "homepage": "https://github.com/coinbase/gdax-node",
  "keywords": [
    "API",
    "bitcoin",
    "coinbase",
    "ethereum",
    "exchange",
    "gdax",
    "real-time",
    "trading",
    "websockets"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add",
      "prettier --single-quote --trailing-comma es5 --write"
    ]
  },
  "main": "index.js",
  "name": "gdax",
  "optionalDependencies": {},
  "readme": "# GDAX [![CircleCI](https://circleci.com/gh/coinbase/gdax-node.svg?style=svg)](https://circleci.com/gh/coinbase/gdax-node) [![npm version](https://badge.fury.io/js/gdax.svg)](https://badge.fury.io/js/gdax)\n\nThe official Node.js library for Coinbase's [GDAX API](https://docs.gdax.com/).\n\n## Features\n\n* Easy functionality to use in programmatic trading\n* A customizable, websocket-synced Order Book implementation\n* API clients with convenient methods for every API endpoint\n* Abstracted interfaces – don't worry about HMAC signing or JSON formatting; the\n  library does it for you\n\n## Installation\n\n```bash\n# from npm\nnpm install gdax\n\n# from GitHub\nnpm install coinbase/gdax-node\n```\n\nYou can learn about the API responses of each endpoint [by reading our\ndocumentation](https://docs.gdax.com/#market-data).\n\n## Quick Start\n\nThe GDAX API has both public and private endpoints. If you're only interested in\nthe public endpoints, you should use a `PublicClient`.\n\n```js\nconst Gdax = require('gdax');\nconst publicClient = new Gdax.PublicClient();\n```\n\nAll methods, unless otherwise specified, can be used with either a promise or\ncallback API.\n\n### Using Promises\n\n```js\npublicClient\n  .getProducts()\n  .then(data => {\n    // work with data\n  })\n  .catch(error => {\n    // handle the error\n  });\n```\n\nThe promise API can be used as expected in `async` functions in ES2017+\nenvironments:\n\n```js\nasync function yourFunction() {\n\n  try {\n\n    const products = await publicClient.getProducts();\n\n  } catch(error) {\n    /* ... */\n  }\n\n}\n```\n\n### Using Callbacks\n\nYour callback should accept two arguments:\n\n- `error`: contains an error message (`string`), or `null` if no was error\n  encountered\n- `response`: a generic HTTP response abstraction created by the [`request`\n  library](https://github.com/request/request)\n- `data`: contains data returned by the GDAX API, or `undefined` if an error was\n  encountered\n\n```js\npublicClient.getProducts((error, response, data) => {\n  if (error) {\n    // handle the error\n  } else {\n    // work with data\n  }\n});\n```\n\n**NOTE:** if you supply a callback, no promise will be returned. This is to\nprevent potential `UnhandledPromiseRejectionWarning`s, which will cause future\nversions of Node to terminate.\n\n```js\nconst myCallback = (err, response, data) => { /* ... */ };\n\nconst result = publicClient.getProducts(myCallback);\n\nresult.then(() => { /* ... */ }); // TypeError: Cannot read property 'then' of undefined\n```\n\n### Optional Parameters\n\nSome methods accept optional parameters, e.g.\n\n```js\npublicClient\n  .getProductOrderBook('BTC-USD', { level: 3 })\n  .then(book => { /* ... */ });\n```\n\nTo use optional parameters with callbacks, supply the options as the first\nparameter(s) and the callback as the last parameter:\n\n```js\npublicClient\n  .getProductOrderBook('ETH-USD', { level: 3 }, (error, response, book) => { /* ... */ });\n```\n\n### The Public API Client\n\n```js\nconst publicClient = new Gdax.PublicClient(endpoint);\n```\n\n- `productID` *optional* - defaults to 'BTC-USD' if not specified.\n- `endpoint` *optional* - defaults to 'https://api.gdax.com' if not specified.\n\n#### Public API Methods\n\n* [`getProducts`](https://docs.gdax.com/#get-products)\n\n```js\npublicClient.getProducts(callback);\n```\n\n* [`getProductOrderBook`](https://docs.gdax.com/#get-product-order-book)\n\n```js\n// Get the order book at the default level of detail.\npublicClient.getProductOrderBook('BTC-USD', callback);\n\n// Get the order book at a specific level of detail.\npublicClient.getProductOrderBook('LTC-USD', { level: 3 }, callback);\n```\n\n* [`getProductTicker`](https://docs.gdax.com/#get-product-ticker)\n\n```js\npublicClient.getProductTicker('ETH-USD', callback);\n```\n\n* [`getProductTrades`](https://docs.gdax.com/#get-trades)\n\n```js\npublicClient.getProductTrades('BTC-USD', callback);\n\n// To make paginated requests, include page parameters\npublicClient.getProductTrades('BTC-USD', { after: 1000 }, callback);\n```\n\n* [`getProductTradeStream`](https://docs.gdax.com/#get-trades)\n\nWraps around `getProductTrades`, fetches all trades with IDs `>= tradesFrom` and\n`<= tradesTo`. Handles pagination and rate limits.\n\n```js\nconst trades = publicClient.getProductTradeStream('BTC-USD', 8408000, 8409000);\n\n// tradesTo can also be a function\nconst trades = publicClient.getProductTradeStream('BTC-USD', 8408000, trade => Date.parse(trade.time) >= 1463068e6);\n```\n\n* [`getProductHistoricRates`](https://docs.gdax.com/#get-historic-rates)\n\n```js\npublicClient.getProductHistoricRates('BTC-USD', callback);\n\n// To include extra parameters:\npublicClient.getProductHistoricRates('BTC-USD', { granularity: 3000 }, callback);\n```\n\n* [`getProduct24HrStats`](https://docs.gdax.com/#get-24hr-stats)\n\n```js\npublicClient.getProduct24HrStats('BTC-USD', callback);\n```\n\n* [`getCurrencies`](https://docs.gdax.com/#get-currencies)\n\n```js\npublicClient.getCurrencies(callback);\n```\n\n* [`getTime`](https://docs.gdax.com/#time)\n\n```js\npublicClient.getTime(callback);\n```\n\n### The Authenticated API Client\n\nThe [private exchange API endpoints](https://docs.gdax.com/#private) require you\nto authenticate with a GDAX API key. You can create a new API key [in your\nexchange account's settings](https://gdax.com/settings). You can also specify\nthe API URI (defaults to `https://api.gdax.com`).\n\n```js\nconst key = 'your_api_key';\nconst secret = 'your_b64_secret';\nconst passphrase = 'your_passphrase';\n\nconst apiURI = 'https://api.gdax.com';\nconst sandboxURI = 'https://api-public.sandbox.gdax.com';\n\nconst authedClient = new Gdax.AuthenticatedClient(key, secret, passphrase, apiURI);\n```\n\nLike `PublicClient`, all API methods can be used with either callbacks or will\nreturn promises.\n\n`AuthenticatedClient` inherits all of the API methods from\n`PublicClient`, so if you're hitting both public and private API endpoints you\nonly need to create a single client.\n\n#### Private API Methods\n\n* [`getCoinbaseAccounts`](https://docs.gdax.com/#coinbase-accounts)\n\n```javascript\nauthedClient.getCoinbaseAccounts(callback);\n```\n\n* [`getPaymentMethods`](https://docs.gdax.com/#payment-methods)\n\n```javascript\nauthedClient.getPaymentMethods(callback);\n```\n\n* [`getAccounts`](https://docs.gdax.com/#list-accounts)\n\n```js\nauthedClient.getAccounts(callback);\n```\n\n* [`getAccount`](https://docs.gdax.com/#get-an-account)\n\n```js\nconst accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccount(accountID, callback);\n```\n\n* [`getAccountHistory`](https://docs.gdax.com/#get-account-history)\n\n```js\nconst accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccountHistory(accountID, callback);\n\n// For pagination, you can include extra page arguments\nauthedClient.getAccountHistory(accountID, { before: 3000 }, callback);\n```\n\n* [`getAccountHolds`](https://docs.gdax.com/#get-holds)\n\n```js\nconst accountID = '7d0f7d8e-dd34-4d9c-a846-06f431c381ba';\nauthedClient.getAccountHolds(accountID, callback);\n\n// For pagination, you can include extra page arguments\nauthedClient.getAccountHolds(accountID, { before: 3000 }, callback);\n```\n\n* [`buy`, `sell`](https://docs.gdax.com/#place-a-new-order)\n\n```js\n// Buy 1 BTC @ 100 USD\nconst buyParams = {\n  'price': '100.00', // USD\n  'size': '1',  // BTC\n  'product_id': 'BTC-USD',\n};\nauthedClient.buy(buyParams, callback);\n\n// Sell 1 BTC @ 110 USD\nconst sellParams = {\n  'price': '110.00', // USD\n  'size': '1', // BTC\n  'product_id': 'BTC-USD',\n};\nauthedClient.sell(sellParams, callback);\n```\n\n* [`placeOrder`](https://docs.gdax.com/#place-a-new-order)\n\n```js\n// Buy 1 LTC @ 75 USD\nconst params = {\n  'side': 'buy',\n  'price': '75.00', // USD\n  'size': '1', // LTC\n  'product_id': 'LTC-USD',\n};\nauthedClient.placeOrder(params, callback);\n```\n\n* [`cancelOrder`](https://docs.gdax.com/#cancel-an-order)\n\n```js\nconst orderID = 'd50ec984-77a8-460a-b958-66f114b0de9b';\nauthedClient.cancelOrder(orderID, callback);\n```\n\n* [`cancelOrders`](https://docs.gdax.com/#cancel-all)\n\n```js\nauthedClient.cancelOrders(callback);\n```\n\n* [`cancelAllOrders`](https://docs.gdax.com/#cancel-all)\n\n```js\n// `cancelOrders` may require you to make the request multiple times until\n// all of the orders are deleted.\n\n// `cancelAllOrders` will handle making these requests for you asynchronously.\n// Also, you can add a `product_id` param to only delete orders of that product.\n\n// The data will be an array of the order IDs of all orders which were cancelled\nauthedClient.cancelAllOrders({product_id: 'BTC-USD'}, callback);\n```\n\n* [`getOrders`](https://docs.gdax.com/#list-open-orders)\n\n```js\nauthedClient.getOrders(callback);\n// For pagination, you can include extra page arguments\nauthedClient.getOrders({ after: 3000 }, callback);\n```\n\n* [`getOrder`](https://docs.gdax.com/#get-an-order)\n\n```js\nconst orderID = 'd50ec984-77a8-460a-b958-66f114b0de9b';\nauthedClient.getOrder(orderID, callback);\n```\n\n* [`getFills`](https://docs.gdax.com/#list-fills)\n\n```js\nauthedClient.getFills(callback);\n// For pagination, you can include extra page arguments\nauthedClient.getFills({ before: 3000 }, callback);\n```\n\n* [`getFundings`](https://docs.gdax.com/#list-fundings)\n\n```js\nauthedClient.getFundings({}, callback);\n```\n\n* [`repay`](https://docs.gdax.com/#repay)\n\n```js\nconst params = {\n  'amount': '2000.00',\n  'currency': 'USD'\n};\nauthedClient.repay(params, callback);\n```\n\n* [`marginTransfer`](https://docs.gdax.com/#margin-transfer)\n\n```js\nconst params =\n  'margin_profile_id': '45fa9e3b-00ba-4631-b907-8a98cbdf21be',\n  'type': 'deposit',\n  'currency': 'USD',\n  'amount': 2\n};\nauthedClient.marginTransfer(params, callback);\n```\n\n* [`closePosition`](https://docs.gdax.com/#close)\n\n```js\nconst params = {\n  'repay_only': false\n};\nauthedClient.closePosition(params, callback);\n```\n\n* [`deposit`, `withdraw`](https://docs.gdax.com/#deposits)\n\n```js\n// Deposit to your Exchange USD account from your Coinbase USD account.\nconst depositParamsUSD = {\n  'amount': '100.00',\n  'currency': 'USD',\n  'coinbase_account_id': '60680c98bfe96c2601f27e9c', // USD Coinbase Account ID\n};\nauthedClient.deposit(depositParamsUSD, callback);\n\n// Withdraw from your Exchange USD account to your Coinbase USD account.\nconst withdrawParamsUSD = {\n  'amount': '100.00',\n  'currency': 'USD',\n  'coinbase_account_id': '60680c98bfe96c2601f27e9c', // USD Coinbase Account ID\n};\nauthedClient.withdraw(withdrawParamsUSD, callback);\n\n// Deposit to your Exchange BTC account from your Coinbase BTC account.\nconst depositParamsBTC = {\n  'amount': '2.0',\n  'currency': 'BTC',\n  'coinbase_account_id': '536a541fa9393bb3c7000023', // BTC Coinbase Account ID\n};\nauthedClient.deposit(depositParamsBTC, callback);\n\n// Withdraw from your Exchange BTC account to your Coinbase BTC account.\nconst withdrawParamsBTC = {\n  'amount': '2.0',\n  'currency': 'BTC',\n  'coinbase_account_id': '536a541fa9393bb3c7000023', // BTC Coinbase Account ID\n};\nauthedClient.withdraw(withdrawParamsBTC, callback);\n\n// Withdraw from your Exchange BTC account to another BTC address.\nconst withdrawAddressParams = {\n  'amount': 10.00,\n  'currency': 'BTC',\n  'crypto_address': '15USXR6S4DhSWVHUxXRCuTkD1SA6qAdy'\n}\nauthedClient.withdrawCrypto(withdrawAddressParams, callback);\n```\n\n* [`getTrailingVolume`](https://docs.gdax.com/#user-account)\n\n```js\n// Get your 30 day trailing volumes\nauthedClient.getTrailingVolume(callback);\n```\n\n### Websocket Client\n\nThe `WebsocketClient` allows you to connect and listen to the [exchange\nwebsocket messages](https://docs.gdax.com/#messages).\n\n```js\nconst websocket = new Gdax.WebsocketClient(['BTC-USD', 'ETH-USD']);\n\nwebsocket.on('message', data => { /* work with data */ });\nwebsocket.on('error', err => { /* handle error */ });\nwebsocket.on('close', () => { /* ... */ });\n```\n\nOptionally set the heartbeat mode or websocket URI.\n```javascript\nconst websocket = new Gdax.WebsocketClient(\n  ['BTC-USD','ETH-USD'],\n  'https://api-public.sandbox.gdax.com',\n  {\n    key: 'suchkey',\n    secret: 'suchsecret',\n    passphrase: 'muchpassphrase',\n  },\n  { heartbeat: true }\n);\n```\n\nThe following events can be emitted from the `WebsocketClient`:\n\n- `open`\n- `message`\n- `close`\n- `error`\n\n### Orderbook\n\n`Orderbook` is a data structure that can be used to store a local copy of the\norderbook.\n\n```js\nconst orderbook = new Gdax.Orderbook();\n```\nThe orderbook has the following methods:\n\n- `state(book)`\n- `get(orderId)`\n- `add(order)`\n- `remove(orderId)`\n- `match(match)`\n- `change(change)`\n\n### Orderbook Sync\n\n`OrderbookSync` creates a local mirror of the orderbook on GDAX using\n`Orderbook` and `WebsocketClient` as described\n[here](https://docs.gdax.com/#real-time-order-book).\n\n```js\nconst orderbookSync = new Gdax.OrderbookSync(['BTC-USD', 'ETH-USD']);\nconsole.log(orderbookSync.books['ETH-USD'].state());\n```\n\n## Testing\n\n```bash\nnpm test\n\n# test for known vulnerabilities in packages\nnpm install -g nsp\nnsp check --output summary\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/coinbase/gdax-node.git"
  },
  "scripts": {
    "precommit": "lint-staged",
    "test": "mocha --full-trace --ui tdd --bail --reporter spec tests/*.js"
  },
  "types": "index.d.ts",
  "version": "0.5.1"
}
